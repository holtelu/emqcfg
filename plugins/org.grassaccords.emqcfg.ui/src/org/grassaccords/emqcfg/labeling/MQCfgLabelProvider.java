/*
 * generated by Xtext
 */
package org.grassaccords.emqcfg.labeling;

import org.eclipse.xtext.ui.core.DefaultLabelProvider;
import org.grassaccords.emqcfg.mQCfg.Channel;
import org.grassaccords.emqcfg.mQCfg.Cluster;
import org.grassaccords.emqcfg.mQCfg.ClusterQMgrBinding;
import org.grassaccords.emqcfg.mQCfg.Interface;
import org.grassaccords.emqcfg.mQCfg.Model;
import org.grassaccords.emqcfg.mQCfg.Node;
import org.grassaccords.emqcfg.mQCfg.QMgr;
import org.grassaccords.emqcfg.mQCfg.QMgrBinding;

/**
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class MQCfgLabelProvider extends DefaultLabelProvider {

	String text(Model element) {
		return element.getName();
	}

	String text(Interface element) {
		return element.getName() + " : " + element.getIp() + " - "
				+ element.getHost() + "(" + element.getPort() + ")";
	}

	String text(Node element) {
		return element.getName();
	}

	String text(ClusterQMgrBinding element) {
		return (element.isIsRepository() ? "*" : "")
				+ element.getQmgr().getName() + "@"
				+ element.getInterface().getName();
	}

	String text(QMgrBinding element) {
		return element.getQmgr().getName() + "@"
				+ element.getInterface().getName();
	}

	String image(Node element) {
		return "node.gif";
	}

	String image(Interface element) {
		return "interface.gif";
	}

	String image(QMgr element) {
		return "queuemanager.gif";
	}

	String image(QMgrBinding element) {
		return "queuemanager.gif";
	}

	String image(ClusterQMgrBinding element) {
		return (element.isIsRepository() ? "repositoryqueuemanager.gif":"queuemanager.gif");
	}

	String image(Cluster element) {
		return "cluster.gif";
	}

	String image(Channel element) {
		return (element.isBidirectional() ? "bidirectionalchannel.gif" : "unidirectionalchannel.gif");
	}

}
