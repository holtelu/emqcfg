/*
 * generated by Xtext
 */
package org.grassaccords.emqcfg.contentassist;

import static ch.lambdaj.Lambda.*;
import static org.grassaccords.emqcfg.util.MQCfgUtil.*;

import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.ui.core.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.core.editor.contentassist.ICompletionProposalAcceptor;
import org.grassaccords.emqcfg.mQCfg.Channel;
import org.grassaccords.emqcfg.mQCfg.Cluster;
import org.grassaccords.emqcfg.mQCfg.ClusterQMgrBinding;
import org.grassaccords.emqcfg.mQCfg.Node;
import org.grassaccords.emqcfg.mQCfg.QMgr;
import org.grassaccords.emqcfg.mQCfg.QMgrBinding;

/**
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on
 * how to customize content assistant
 */
public class MQCfgProposalProvider extends AbstractMQCfgProposalProvider {

	public void completeNode_Qmgrs(Node node, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		List<String> allUnassignedQMgrNames = collect(allUnassignedQMgrs(node),
				on(QMgr.class).getName());
		for (String name : allUnassignedQMgrNames) {
			ICompletionProposal completionProposal = createCompletionProposal(
					name, context);
			acceptor.accept(completionProposal);
		}

	}
	
	public void completeClusterQMgrBinding_Qmgr(Cluster cluster, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
	}

	public void completeClusterQMgrBinding_Qmgr(ClusterQMgrBinding binding,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		Cluster cluster=(Cluster) binding.eContainer();
		addQMgrClusterRepositoryProposals(context, acceptor, collectAllNonMemberQMgr(cluster, context.getRootModel()));
	}
	
	public void completeClusterQMgrBinding_IsRepository(Cluster cluster,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		List<QMgr> allNotMemberQMgrs = collectAllNonMemberQMgr(cluster, context.getRootModel());
		addQMgrClusterProposalsWithoutRepositoryMarker(context, acceptor, allNotMemberQMgrs);
		addQMgrClusterRepositoryProposals(context, acceptor, allNotMemberQMgrs);
	}

	private void addQMgrClusterProposalsWithoutRepositoryMarker(ContentAssistContext context,
			ICompletionProposalAcceptor acceptor, List<QMgr> allNotMemberQMgrs) {
		for (QMgr qMgr : allNotMemberQMgrs) {
			String qMgrName=qMgr.getName();
			ICompletionProposal completionProposal;
			completionProposal = createCompletionProposal(
					qMgrName+"@", getImage(qMgr), context);
			acceptor.accept(completionProposal);
		}
	}

	private void addQMgrClusterRepositoryProposals(ContentAssistContext context,
			ICompletionProposalAcceptor acceptor, List<QMgr> allNotMemberQMgrs) {
		for (QMgr qMgr : allNotMemberQMgrs) {
			String qMgrName=qMgr.getName();
			ICompletionProposal completionProposal;
			completionProposal = createCompletionProposal(
					"*"+qMgrName+"@",getImage(qMgr), context);
			acceptor.accept(completionProposal);
		}
	}

	private List<QMgr> collectAllNonMemberQMgr(Cluster cluster,
			EObject rootModel) {
		List<QMgr> allNotMemberQMgrs = allQMgrs(rootModel);
		allNotMemberQMgrs.removeAll(collect(cluster.getMembers(),on(ClusterQMgrBinding.class).getQmgr()));
		return allNotMemberQMgrs;
	}

	
	public void completeQMgrBinding_Qmgr(Channel channel, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		List<QMgr> possibleChannelQMgrs = collectPossibleChannelQMgrs(channel,context.getRootModel());
		addQMgrChannelProposals(context,acceptor,possibleChannelQMgrs);
	}

	private void addQMgrChannelProposals(ContentAssistContext context,
			ICompletionProposalAcceptor acceptor, List<QMgr> allNotMemberQMgrs) {
		for (QMgr qMgr : allNotMemberQMgrs) {
			String qMgrName=qMgr.getName();
			ICompletionProposal completionProposal;
			completionProposal = createCompletionProposal(
					qMgrName+"@", getImage(qMgr), context);
			acceptor.accept(completionProposal);
		}
	}


	private List<QMgr> collectPossibleChannelQMgrs(Channel channel,
			EObject rootModel) {
		List<QMgr> allNotMemberQMgrs = allQMgrs(rootModel);
		allNotMemberQMgrs.remove(channel.getSrcQMgr().getQmgr());
		allNotMemberQMgrs.remove(channel.getDstQMgr().getQmgr());
		return allNotMemberQMgrs;
	}
}
