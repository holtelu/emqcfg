«IMPORT mqcfg»
«EXTENSION org::grassaccords::emqcfg::MQ»

«DEFINE main FOR QMgr»
	«EXPAND createQM_Linux FOR this»
	«EXPAND createQM_Win FOR this»
	«EXPAND channels FOR this»
	«EXPAND clusterchannels FOR this»
	«EXPAND listener FOR this»
«ENDDEFINE»


«DEFINE createQM_Linux FOR QMgr»
	«FILE nodeScriptsBaseFolder()+"/"+this.fileNameCreateQMShellScript()-»
#!/bin/sh

echo "*** Creating Queue Manager «this.name» ..."
crtmqm -u SYSTEM.DEAD.LETTER.QUEUE -ll -lf 16384 -lp 5 -ls 5 -q «this.name»

echo "*** Starting Queue Manager «this.name» ..."
strmqm «this.name»

echo "*** Waiting 30 Sec. ..."
sleep 30
dspmq

echo "*** Creating Listener ..."
runmqsc «this.name» < «fileNameDefListeners()»

echo "*** Creating Channels ..."
runmqsc «this.name» < «fileNameDefChannels()»

echo "*** Creating Cluster Channels ..."
runmqsc «this.name» < «fileNameDefClusterChannels()»

echo "*** ... Done."
	«ENDFILE»
«ENDDEFINE»

«DEFINE createQM_Win FOR QMgr»
	«FILE nodeScriptsBaseFolder()+"/"+this.fileNameCreateQMShellScriptWin()-»
@echo off

echo "*** Creating Queue Manager «this.name» ..."
crtmqm -u SYSTEM.DEAD.LETTER.QUEUE -ll -lf 16384 -lp 5 -ls 5 -q «this.name»

echo "*** Starting Queue Manager «this.name» ..."
strmqm «this.name»

pause

dspmq

echo "*** Creating Listener ..."
runmqsc «this.name» < «fileNameDefListeners()»

echo "*** Creating Channels ..."
runmqsc «this.name» < «fileNameDefChannels()»

echo "*** Creating Cluster Channels ..."
runmqsc «this.name» < «fileNameDefClusterChannels()»

echo "*** ... Done."
	«ENDFILE»
«ENDDEFINE»

////////////////////////////////////
/// channel definitions
////////////////////////////////////

«DEFINE channels FOR QMgr-»
«FILE nodeScriptsBaseFolder()+"/"+fileNameDefChannels()»
DEFINE CHANNEL('SYSTEM.ADMIN.SVRCONN') +
       CHLTYPE(SVRCONN) +
       MCAUSER('mqm') +
       REPLACE
       
«FOREACH this.qmgrSrcChannels() AS channel-»
-- define transmit queue for channel «channel.name»      
DEFINE QLOCAL(«channel.mqXmitQName()») +
       USAGE(XMITQ) + 
       INITQ(SYSTEM.CHANNEL.INITQ) +
       TRIGGER +
       TRIGTYPE(FIRST)+
       TRIGDATA(«channel.mqChannelName()») + 
       DEFPSIST(YES) + 
       MAXDEPTH(640000) +
       MAXMSGL(10194304) +
       REPLACE

-- define sender channel for channel «channel.name»      
DEFINE CHANNEL(«channel.mqChannelName()») + 
       CHLTYPE(SDR) +
       CONNAME('«channel.mqReceiverConnectionName()»') +
       TRPTYPE(TCP) +
       XMITQ(«channel.mqXmitQName()») +
       MCAUSER('mqm') +
       REPLACE
«IF channel.bidirectional-»

-- define reverse receiver channel for channel «channel.name»      
DEFINE CHANNEL(«channel.mqReverseChannelName()») + 
       CHLTYPE(RCVR) + 
       TRPTYPE(TCP) +
       MCAUSER('mqm') + 
       REPLACE
       
«ENDIF-»
«ENDFOREACH-»

«FOREACH this.qmgrDstChannels() AS channel-»
-- define receiver channel for channel «channel.name»      
DEFINE CHANNEL(«channel.mqChannelName()») + 
       CHLTYPE(RCVR) + 
       TRPTYPE(TCP) +
       MCAUSER('mqm') + 
       REPLACE

«IF channel.bidirectional-»
-- define reverse transmit queue for channel «channel.name»      
DEFINE QLOCAL(«channel.mqReverseXmitQName()») +
       USAGE(XMITQ) + 
       INITQ(SYSTEM.CHANNEL.INITQ) +
       TRIGGER +
       TRIGTYPE(FIRST)+
       TRIGDATA(«channel.mqReverseChannelName()») + 
       DEFPSIST(YES) + 
       MAXDEPTH(640000) +
       MAXMSGL(10194304) +
       REPLACE

-- define reverse sender channel for channel «channel.name»      
DEFINE CHANNEL(«channel.mqReverseChannelName()») + 
       CHLTYPE(SDR) +
       CONNAME('«channel.mqReverseReceiverConnectionName()»') +
       TRPTYPE(TCP) +
       XMITQ(«channel.mqXmitQName()») +
       MCAUSER('mqm') +
       REPLACE
«ENDIF-»
		«ENDFOREACH-»
	«ENDFILE»
	
«ENDDEFINE»

////////////////////////////////////
/// cluster channel definitions
////////////////////////////////////

«DEFINE clusterchannels FOR QMgr-»
	«FILE nodeScriptsBaseFolder()+"/"+fileNameDefClusterChannels()»
		«IF isRepoQMgr()-»
//repository queue manager definition	
DEFINE NAMELIST('CL_RPOS_NAMELIST')	+
       NAMES(«FOREACH this.qmgrRepo() AS cluster SEPARATOR ','»'«cluster.name»'«ENDFOREACH») +
       REPLACE
       
alter qmgr repos('') reposnl('CL_RPOS_NAMELIST')

			«FOREACH this.qmgrClusterBindings() AS binding-»
				«LET binding.qmgr.name+"_"+binding.interface.name AS uniqueName-»
DEFINE NAMELIST('CL_«uniqueName»_RCV_NAMELIST') +
	   NAMES(«FOREACH binding.cluster() AS cluster SEPARATOR ','»'«cluster.name»'«ENDFOREACH») + 
	   REPLACE
	   
DEFINE CHANNEL('TO.«uniqueName»') +
	   CHLTYPE(CLUSRCVR) +
       TRPTYPE(TCP) +
	   CONNAME('«binding.interface.host»(«binding.interface.port»)') +
	   CLUSNL('CL_«uniqueName»_RCV_NAMELIST') +
	   CLUSTER('') +
	   MCAUSER('mqm') +
	   REPLACE
				«ENDLET-»		
			«ENDFOREACH-»	
		«ENDIF-»
	«ENDFILE»
«ENDDEFINE»

////////////////////////////////////
/// listener definitions
////////////////////////////////////

«DEFINE listener FOR QMgr-»
	«FILE nodeScriptsBaseFolder()+"/"+fileNameDefListeners()»
		«FOREACH this.interfaces AS interface-»
			«LET this.name+'.TCP.'+interface.host+'.'+interface.port AS listenerName»
DEFINE LISTENER('«listenerName»') +
       TRPTYPE(TCP) +
       IPADDR('«interface.host»') +
       PORT(«interface.port») +
       CONTROL(QMGR) +
       REPLACE
       
START LISTENER('«listenerName»')
			«ENDLET-»
		«ENDFOREACH-»
	«ENDFILE»
«ENDDEFINE»

